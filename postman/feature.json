{
	"info": {
		"_postman_id": "b0aeadb7-18c3-4f2a-b8b0-afec2a31240a",
		"name": "Comments tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26534293"
	},
	"item": [
		{
			"name": "add user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Данные в ответе должны соответствовать запросу\", () => {\r",
							"    var body = pm.response.json();\r",
							"\r",
							"    pm.expect(body.id, '\"id\" field').eq(64);\r",
							"    pm.expect(body.name, '\"name\" field').eq('User Name');\r",
							"    pm.expect(body.email, '\"email\" field').eq('mail@yandex.ru')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"User Name\",\r\n    \"email\":\"mail@yandex.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Данные ответа не совпадают с ожидаемыми\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.id, '\"id\" field').eq(56);\r",
							"    pm.expect(response.name, '\"name\" field').eq('Education');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Education\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "add user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Данные в ответе должны соответствовать запросу\", () => {\r",
							"    var body = pm.response.json();\r",
							"\r",
							"    pm.expect(body.id, '\"id\" field').eq(65);\r",
							"    pm.expect(body.name, '\"name\" field').eq('Other Name');\r",
							"    pm.expect(body.email, '\"email\" field').eq('mail@gmail.ru')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Other Name\",\r\n    \"email\":\"mail@gmail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", () =>  {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\",() => {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", () =>  {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\":\"Яндекс Практикум — среда, где всё получится: и новая IT-профессия, и новая жизнь\",\r\n    \"category\":1,\r\n    \"description\":\"Направление для всех, кто хочет развиваться в сфере программирования вне зависимости от прошлого опыта. Учим разработке и тестированию в условиях, которые имитируют реальную работу: с проектами, спринтами и дедлайнами. Мы за честный взгляд на программирование: без клише и ложных ожиданий.\",\r\n    \"eventDate\":\"2025-01-01 00:00:00\",\r\n    \"location\":{\"lat\":100,\"lon\":100},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"50\",\r\n    \"requestModeration\":\"true\",\r\n    \"title\":\"заниматься можно когда угодно, главное — уложиться в дедлайн\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add user 1 exception",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 409\", () => {\r",
							"    pm.expect(pm.response.code).to.be.eq(409);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/comments?eventId=39&text=Этот коммент должны отклонить, так как событие неопубликовано.",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "39"
						},
						{
							"key": "text",
							"value": "Этот коммент должны отклонить, так как событие неопубликовано."
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get event without comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200\", () => {\r",
							"    pm.expect(pm.response.code).to.be.eq(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Коментарии должны отсутствовать\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.comments.length, 'comments count in total').to.eq(0);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						},
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "publish event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"console.log(source)\r",
							"console.log(target)\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\":\"Яндекс Практикум — среда, где всё получится: и новая IT-профессия, и новая жизнь\",\r\n    \"category\":1,\r\n    \"description\":\"Направление для всех, кто хочет развиваться в сфере программирования вне зависимости от прошлого опыта. Учим разработке и тестированию в условиях, которые имитируют реальную работу: с проектами, спринтами и дедлайнами. Мы за честный взгляд на программирование: без клише и ложных ожиданий.\",\r\n    \"eventDate\":\"2025-01-01 00:00:00\",\r\n    \"location\":{\"lat\":100,\"lon\":100},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"50\",\r\n    \"requestModeration\":\"true\",\r\n    \"stateAction\": \"PUBLISH_EVENT\",\r\n    \"title\":\"заниматься можно когда угодно, главное — уложиться в дедлайн\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add user 1 comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 201\", () => {\r",
							"    pm.expect(pm.response.code).to.eq(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Данные не соответствуют ожидаемым\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.id, '\"id\" field').eq(1);\r",
							"    pm.expect(response.text, '\"text\" field').eq('Когда начало?');\r",
							"    pm.expect(response.user, '\"user\" field').eq('User Name');\r",
							"    pm.expect(response.event, '\"event\" field').eq('заниматься можно когда угодно, главное — уложиться в дедлайн');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/comments?eventId=39&text=Когда начало?",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "39"
						},
						{
							"key": "text",
							"value": "Когда начало?"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add user 2 comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 201\", () => {\r",
							"    pm.expect(pm.response.code).to.eq(201)\r",
							"})\r",
							"\r",
							"pm.test(\"Данные не соответствуют ожидаемым\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.id, '\"id\" field').eq(2);\r",
							"    pm.expect(response.text, '\"text\" field').eq('Я слышал старт через месяц');\r",
							"    pm.expect(response.user, '\"user\" field').eq('Other Name');\r",
							"    pm.expect(response.event, '\"event\" field').eq('заниматься можно когда угодно, главное — уложиться в дедлайн');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/comments?eventId=39&text=Я слышал старт через месяц",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "39"
						},
						{
							"key": "text",
							"value": "Я слышал старт через месяц"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "65"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get event with comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200\", () => {\r",
							"    pm.expect(pm.response.code).to.be.eq(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Коментарии должны быть добавлены\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.comments.length, 'comments count in total').to.eq(2);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/:userId/events/:eventId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "64"
						},
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get comment public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200\", () => {\r",
							"    pm.expect(pm.response.code).to.eq(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Данные не совпадают с ожидаемыми\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response.id, '\"id\" field').eq(2);\r",
							"    pm.expect(response.text, '\"text\" field').eq('Я слышал старт через месяц');\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get comments public",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 200\", () => {\r",
							"    pm.expect(pm.response.code).to.eq(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Данные не совпадают с ожидаемыми\", () => {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response[0].text, '\"text\" field').eq('Когда начало?');\r",
							"   \r",
							"   pm.expect(response[1].text, '\"text\" field').eq('Я слышал старт через месяц');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/comments?eventId=39",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "39"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete  comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статуса должен быть 204\", () => {\r",
							"    pm.expect(pm.response.code).to.be.eq(204);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/admin/users/comments/:commentId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "http://localhost:9090",
			"value": "baseUrl"
		}
	]
}